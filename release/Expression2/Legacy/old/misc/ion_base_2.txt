@name Ion Base 2
@inputs [Fire]:number [Target]:entity
@inputs [Cache IonCannon Ent]:wirelink
@outputs [IonFire IonMult AbleToFire Cool]:number
@persist [Core Ion]:entity [Multiplier FiringTime HasEnoughToFire]:number
@persist [TarVector FloatVector]:vector

runOnTick(1)

#Dupe Code
if(dupefinished()){
    reset()
}

if(first()){
    findIncludePlayerProps(owner()) 
    findByModel("models/props_c17/substation_stripebox01a.mdl")
    Props=findToArray()
    for(Loop=1,Props:count()){
        Props[Loop,entity]:setColor(80,80,80)
        Props[Loop,entity]:setAlpha(255)
        Props[Loop,entity]:setMaterial("models/debug/debugwhite")
    } Loop=0
    findByModel("models/jaanus/wiretool/wiretool_pixel_lrg.mdl")
    Props=findToArray()
    for(Loop=1,Props:count()){
        Props[Loop,entity]:setColor(80,80,80)
        Props[Loop,entity]:setAlpha(255)
        Props[Loop,entity]:setMaterial("models/debug/debugwhite")
    } Loop=0
    Core=Ent["Entity1",entity]
    Ion=Ent["Entity2",entity]
    Ion:setMass(64)
    for(Loop=1,Ion:hasConstraints("Weld")){
        Ion:isWeldedTo(Loop):setMass(1)
    }
    #user variables
    Multiplier=1000 #Full Multiplier
    FiringTime=10 #Firing Time in Seconds
    #don't change anything below this line    
    AbleToFire=1
}

#Ion Control
HasEnergy=(Cache["Energy",number]>=IonCannon["Energy/Sec",number]*1.2 ? 1 : 0)
HasCoolant=(Cache["Coolant",number]>=IonCannon["Coolant/Sec",number]*1.2 ? 1 : 0)
HasEnoughToFire=(HasEnergy&HasCoolant ? 1 : 0)
if(!Fire){
    stoptimer("Charging")
    IonMult=0.1
}
if($IonFire>0){
    timer("Charging",7000)
    IonMult=0.1
}
if(clk("Charging")){
    IonMult=Multiplier
}
if(!HasEnoughToFire){
    AbleToFire=0
}
if(Cache["Energy",number]>=100*Multiplier*FiringTime&Cache["Coolant",number]>=25*Multiplier*FiringTime){
    AbleToFire=1
}
IonFire=AbleToFire*Fire*HasEnoughToFire

#Movement Code
CurP=Ion:pos()
TarP=Target:boxCenterW()
TarVector=(TarP-CurP)
TarP=Core:pos()+vec(0,0,300)
FloatVector=(TarP-CurP)
TarQ = quat(TarVector:toAngle())
CurQ = quat(Ion)
Q = TarQ/CurQ
V = Ion:toLocal(rotationVector(Q)+Ion:pos())
Ion:applyTorque((350*V - 45*Ion:angVelVector())*Ion:inertia())  
Ion:applyForce((10*FloatVector+$FloatVector*20)*Ion:mass())

Cool=((Cache["Energy",number]/Cache["Coolant",number])>4&Cache["Energy",number]>1300 ? 1 : 0)
