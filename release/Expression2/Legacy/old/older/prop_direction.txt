@name Prop Direction
@inputs 
@outputs
@persist [Owner Entity LastEntity]:entity Equipped:number
@persist [POS]:vector [Mult]:number [LastColor]:vector
@trigger 

runOnTick(1)

if(first()){
    for(Loop=1,6){
        holoCreate(Loop)
        holoAlpha(Loop,0)
        holoModel(Loop,"cube") 
    }
    holoColor(1,vec(255,75,75))
    holoColor(2,vec(180,0,0))
    holoColor(3,vec(75,255,75))
    holoColor(4,vec(0,180,0))
    holoColor(5,vec(75,75,255))
    holoColor(6,vec(0,0,180))
    printColor("Red = Forward Axis, Green = Right Axis, Blue = Up Axis")
    printColor("Light = Positive, Dark = Negative")
    Owner=owner()
    Mult=2
}

Entity=(Owner:aimEntity():type()=="" ? Entity : Owner:aimEntity())

if(Owner:weapon():type():find("tool")|Owner:weapon():type():find("physgun")){
    Equipped=1
}else{
    Equipped=0
}

if($Equipped){
    for(Loop=1,6){
        holoAlpha(Loop,Equipped*255) 
    }
}

if(LastEntity!=Entity&Equipped){
    for(Loop=1,6){
        holoParent(Loop,Entity) 
    }
    POS=Entity:pos()+Entity:up()*10
    holoPos(1,Entity:forward()*Mult*6+POS)
    holoAng(1,Entity:forward():toAngle())
    holoScale(1,vec(Mult,Mult/10,Mult/10))
    holoPos(2,-Entity:forward()*Mult*6+POS)
    holoAng(2,Entity:forward():toAngle())
    holoScale(2,vec(Mult,Mult/10,Mult/10))
    holoPos(3,Entity:right()*Mult*6+POS)
    holoAng(3,Entity:right():toAngle())
    holoScale(3,vec(Mult,Mult/10,Mult/10))
    holoPos(4,-Entity:right()*Mult*6+POS)
    holoAng(4,Entity:right():toAngle())
    holoScale(4,vec(Mult,Mult/10,Mult/10))
    holoPos(5,Entity:up()*Mult*6+POS)
    holoAng(5,Entity:up():toAngle())
    holoScale(5,vec(Mult,Mult/10,Mult/10))
    holoPos(6,-Entity:up()*Mult*6+POS)
    holoAng(6,Entity:up():toAngle())
    holoScale(6,vec(Mult,Mult/10,Mult/10))
    hint("Prop is Constrained "+Entity:hasConstraints()+" times with "+Entity:getConstraints():count()+" Props",1)
    LastEntity:setColor(LastColor)
    LastColor=Entity:getColor()
    Entity:setColor(vec(255,0,0))
    LastEntity=Entity
}

