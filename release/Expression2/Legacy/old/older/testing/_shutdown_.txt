@name Serpentis Core
@inputs [Entity]:wirelink
@inputs [Pod Pod2 Cam Eye Latch Light]:wirelink [PodActive Mouse2]:number
@outputs [BGColor]:vector Debug:array [On Thrust Reload1 Reload2 Fire1 Fire2]:number
@persist [BGColor Color]:vector
@persist [Owner Core Turret Chip]:entity
@persist [RunActive SetWeight Mode]:number
@persist [PilotHeading TurretHeading]:angle
@model models/hunter/plates/plate025x025.mdl
#initialization code
#runOnTick(1)
interval(45)
if(dupefinished()){
    reset()
}
if(first()){
    #set variables
        BGColor=vec(25,25,25)
        Color=vec(255,90,0)
        Owner=owner()
        Core=entity():isWeldedTo()
        Turret=Entity["Entity8",entity]
        Chip=entity()
    #set weights
        for(Loop=1,Core:hasConstraints("Weld")){
            Core:isWeldedTo(Loop):setMass(30)
        }
        Entity["Entity1",entity]:setMass(1000) #Wing Left 1
        Entity["Entity2",entity]:setMass(1000) #Wing Left 2
        Entity["Entity3",entity]:setMass(1000) #Wing Right 1
        Entity["Entity4",entity]:setMass(1000) #Wing Right 2
        Entity["Entity5",entity]:setMass(1000) #Nose 1
        Entity["Entity6",entity]:setMass(1000) #Nose 2
        Entity["Entity7",entity]:setMass(1000) #Base
    #set exceptional weights
        Pod["Entity",entity]:setMass(1) #Pilot seat
        Pod2["Entity",entity]:setMass(1) #Copilot seat
        Core:setMass(10000) #Core
        Turret:setMass(200) #Turret
    #set chips
        Entity:entity():setMass(1)
        Pod:entity():setMass(1)
        Pod2:entity():setMass(1)
        Cam:entity():setMass(1)
        Eye:entity():setMass(1)
        Chip:setMass(1)
    #Run code
        RunActive=1
    #Mode choice code
        Mode=1
    #Effects code
        Light["RGB",vector]=Color
        Light["GlowBrightness",number]=10
        Light["GlowDecay",number]=2.5
        Light["GlowSize",number]=150
    #Camera code
        Pod["Crosshairs",number]=1
    #Heading code
        PilotHeading=(Core:forward()):toAngle()
        TurretHeading=(Core:forward()):toAngle()
}
#Debug Code
Debug[1,number]=ops()
Debug[2,number]=minquota()
Debug[3,number]=maxquota()
#Run code
if(PodActive){
    RunActive=1
}else{
    timer("Run",5000)
}
if(clk("Run")){
    RunActive=0
}
#Mode choice code
if(RunActive){
    if(~Mouse2&Mouse2){
        Mode=(Mode==1?2 : 1)
    }
    if(~PodActive&!PodActive){
        Mode=1
    }
}
#Effects code
if(RunActive){
    Thrust=Pod["W",number]
    On=PodActive
    Startsize=10
    Length=200
    Alpha=150
    if(toUnit("kph", entity():vel():length())>=50){
        Entity["Entity9",entity]:setTrails(Startsize,0,Length,"trails/physbeam",Color,Alpha)
        Entity["Entity10",entity]:setTrails(Startsize,0,Length,"trails/physbeam",Color,Alpha)
        Entity["Entity11",entity]:setTrails(Startsize,0,Length,"trails/physbeam",Color,Alpha)
        Entity["Entity12",entity]:setTrails(Startsize,0,Length,"trails/physbeam",Color,Alpha)
        Entity["Entity13",entity]:setTrails(Startsize,0,Length,"trails/physbeam",Color,Alpha)
        Entity["Entity14",entity]:setTrails(Startsize,0,Length,"trails/physbeam",Color,Alpha)
    }else{
    Entity["Entity9",entity]:removeTrails()
    Entity["Entity10",entity]:removeTrails()
    Entity["Entity11",entity]:removeTrails()
    Entity["Entity12",entity]:removeTrails()
    Entity["Entity13",entity]:removeTrails()
    Entity["Entity14",entity]:removeTrails()
    }
}
#Hints
if(~PodActive&PodActive){
    Pod["Entity",entity]:hintDriver("Press E to exit",5)
    Pod["Entity",entity]:hintDriver("Ship is controlled by keyboard and mouse",5)
    Pod["Entity",entity]:hintDriver("WASD for movement, Mouse to aim",5) 
    Pod["Entity",entity]:hintDriver("Mouse2 to change Pilot/Turret modes",5) 
    Pod["Entity",entity]:hintDriver("Mouse1 to shoot, R to reload",5) 
    Pod["Entity",entity]:hintDriver("Attention: If your camera does not change view then",10)
    Pod["Entity",entity]:hintDriver("Exit the ship and press USE on the cam controller above",10)
}
#Camera code
Cam["Activated",number]=PodActive
if(RunActive&PodActive){
    if(Mode==1){ #If in Pilot mode
        Cam["Parent",entity]=Core
        Cam["Position",vector]=Core:pos()-Core:forward()*550+Core:up()*200
        Cam["Direction",vector]=Core:forward()
    }else{
        Cam["Parent",entity]=Turret
        Cam["Position",vector]=Turret:pos()+Turret:forward()*40
        Cam["Direction",vector]=Turret:forward()
    }
}
#Heading code
if(RunActive){
    if(PodActive){
        Eye["Enable",number]=1
    }else{
        Eye["Enable",number]=0
        PilotHeading=(Core:forward()):toAngle()
    }
    if(Mode==1){ #If in Pilot mode
        PilotHeading+=angnorm(ang(-clamp(Eye["Y",number]/2,-11,11),-clamp(Eye["X",number]/2,-99,9),0)) #Use pilot heading
        TurretHeading=(Core:forward()):toAngle() #Reset turret heading
    }else{
        TurretHeading+=angnorm(ang(-clamp(Eye["Y",number]/2,-11,11),-clamp(Eye["X",number]/2,-99,9),0)) #Use Turret heading     
    }
}
#Orientation code
if(RunActive&PodActive){
    if(Mode==1){ #If in Pilot mode
        TarQ=quat(PilotHeading) #Calculate quaternion for target orientation
        CurQ=quat(Core) #Calculate current orientation quaternion
        Quat=TarQ/CurQ 
        Vec=Core:toLocal(rotationVector(Quat)+Core:pos()) 
        Core:applyTorque((150*Vec-24*Core:angVelVector())*Core:inertia()) #Factors 150 and 12 can be adjusted to achieve best effect.
    }else{
        TarQ=quat(TurretHeading) #Calculate quaternion for target orientation
        CurQ=quat(Turret) #Calculate current orientation quaternion
        Quat=TarQ/CurQ 
        Vec=Turret:toLocal(rotationVector(Quat)+Turret:pos()) 
        Turret:applyTorque((150*Vec-24*Turret:angVelVector())*Turret:inertia()) #Factors 150 and 12 can be adjusted to achieve best effect.
    }
}
#Turret return lock code
if(RunActive){
    if(Mode==1){ #If in Pilot mode
        if(Latch["Welded",number]==0){ #if not locked
            TarQ=quat(TurretHeading) #Calculate quaternion for target orientation
            CurQ=quat(Turret) #Calculate current orientation quaternion
            Quat=TarQ/CurQ
            Vec=Turret:toLocal(rotationVector(Quat)+Turret:pos()) 
            Turret:applyTorque((150*Vec-24*Turret:angVelVector())*Turret:inertia()) #Factors 150 and 12 can be adjusted to achieve best effect.
        }
        if($Mode){ #If in Pilot mode trigger
            timer("Turret",3000) #start timer to lock up
        }
    }else{
        Latch["Activate",number]=0 #unlock in turret mode
    }
}
if(clk("Turret")){
    Latch["Activate",number]=1 #lock when timer up
}
#Movement Code
if(RunActive&PodActive){
    if(Mode==1){
        WS=Pod["W",number]*1+Pod["S",number]*-1
        DA=Pod["D",number]*1+Pod["A",number]*-1
        UD=Pod["Space",number]*1+Pod["Shift",number]*-1
        if(WS==1|!WS==-1){
            Core:applyForce(Core:forward()*WS*Core:mass()*15)
            Core:applyForce(-(Core:vel()-Core:forward()*15)*Core:mass()/10)
        }
        Core:applyForce(Core:right()*DA*Core:mass()*10)
        Core:applyForce(Core:up()*UD*Core:mass()*10)
        if(Pod["Alt",number]){
            Brake=1
        }
    }
}
#braking code
if(PodActive){
    if(Brake){
        Core:applyForce(-Core:vel()*Core:mass()/5)
        Core:applyAngForce(-Core:angVel()*Core:mass()/5)
    }
}else{
    Core:applyForce(-Core:vel()*Core:mass())
    Core:applyAngForce(-Core:angVel()*Core:mass()/5)
}
Core:applyForce(vec(0, 0, Core:mass() * propGravity():length() - Core:vel():z() * 20) / 66.566669)
#Firing code
if(RunActive&PodActive){
    if(Mode==1){
        Reload1=Pod["R",number]
        Fire1=Pod["Mouse1",number]
    }else{
        Reload2=Pod["R",number]
        Fire2=Pod["Mouse1",number]
    }
}
