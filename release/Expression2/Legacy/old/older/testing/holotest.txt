@name HoloTest
@inputs 
@outputs 
@persist RefProp:entity CmdArray:array CodePrintIter MarkerArray:array SelectedIndex
@persist Scaling [ScalingInitPos ScalingInitScl]:vector 
@trigger 

#TO DO:
#edit functions - e.g. model, color, material, scale
#delete function - auto delete holo if parent prop is removed
#print out e2 code for creating all exisiting holos
#designate reference prop - printed e2 code will make use of this reference

interval(100)

if(first()){
    Scaling=0
    SelectedIndex=0
    RefProp=entity()
    CodePrintIter=0
    runOnLast(1)
}

if(first()){runOnChat(1)}
ChatCmd = (chatClk(owner()) & owner():lastSaid():sub(1,4)=="/ht ")
if(ChatCmd){
    hideChat(1)
    CmdString=owner():lastSaid()
    CmdString=CmdString:replace("/ht ","")
    CmdString=CmdString:trim()
    CmdArray=CmdString:explode(" ")
    
}
else{
    CmdArray=array()
}

if(CmdArray[1,string]=="new"){
    NewIndex=MarkerArray:count()+1
    NewPos=owner():shootPos()+owner():eye()*200
    propSpawn("models/props_phx/games/chess/black_knight.mdl",NewPos,ang(),1)
    if(CmdArray[2,string]!=""){
        ScaleStringArray=CmdArray[2,string]:explode(",")
        ScaleVec=vec(
                    ScaleStringArray[1,string]:toNumber(),
                    ScaleStringArray[2,string]:toNumber(),
                    ScaleStringArray[3,string]:toNumber()
                )
    }
    else{
        ScaleVec=vec(1,1,1)
    }
    if(CmdArray[3,string]!=""){
        ColorStringArray=CmdArray[3,string]:explode(",")
        ColorVec=vec(
                    ColorStringArray[1,string]:toNumber(),
                    ColorStringArray[2,string]:toNumber(),
                    ColorStringArray[3,string]:toNumber()
                )
    }
    else{
        ColorVec=vec(1,1,1)*255
    }
    if(CmdArray[4,string]!=""){
        ModelString=CmdArray[4,string]
    }
    if(CmdArray[5,string]!=""){
        MaterialString=CmdArray[5,string]
    }
   
    findByModel("models/props_phx/games/chess/black_knight.mdl")
    findSortByDistance(NewPos)
    MarkerArray:pushEntity(findResult(1))
    MarkerArray[NewIndex,entity]:setMaterial("models/wireframe")
    holoCreate(NewIndex,NewPos,ScaleVec,ang(),ColorVec,ModelString)
    holoMaterial(NewIndex,MaterialString)
    holoParent(NewIndex,MarkerArray[NewIndex,entity])
}

    #Reference Prop Designation
    
if(CmdArray[1,string]=="ref"){
    if(owner():aimEntity()&!owner():aimEntity():isWorld()){
        print("Reference prop changed: "+owner():aimEntity():toString())
        RefProp=owner():aimEntity()
    }
}

    #Hologram selection
    
if(owner():keyAttack1()){
    ThisEnt=noentity()
    for(Iter=1,MarkerArray:count()){
        if(owner():aimEntity()==MarkerArray[Iter,entity]){
            ThisEnt=MarkerArray[Iter,entity]
            SelectedIndex=Iter
            if(!holoEntity(101)){
                holoCreate(101,
                        holoEntity(SelectedIndex):pos(),
                        vec(1,1,1),
                        holoEntity(SelectedIndex):angles(),
                        vec(255,255,0)
                    )
                holoMaterial(101,"models/wireframe")
                holoParent(101,MarkerArray[SelectedIndex,entity])
            }
            break
        }
    }
    
    if(!ThisEnt){
        SelectedIndex=0
        if(holoEntity(101)){
            holoDelete(101)
        }
    }
}

if(holoEntity(101)){
    holoScaleUnits(101,holoScale(SelectedIndex)*holoEntity(SelectedIndex):boxSize()*1.1)
}

    #Edit scale
    
if(CmdArray[1,string]=="scl"){
    if(CmdArray[2,string]!=""){
        ScaleArray=CmdArray[2,string]:explode(",")
        holoScale(SelectedIndex, vec(
                                        ScaleArray[1,string]:toNumber(),
                                        ScaleArray[2,string]:toNumber(),
                                        ScaleArray[3,string]:toNumber()
                                    )
        )
    }
    else{
        print("Press the use key (E) or deselect to finish scaling")
        Scaling=1
        ScalingInitPos=owner():pos()
        ScalingInitScl=holoScale(SelectedIndex)
    }
}

if(Scaling){
    if(owner():keyUse()){
        print("Finished scaling-- new dimensions: "+holoEntity(SelectedIndex):boxSize())
        Scaling=0
    }
    elseif(owner():keyUse()){
        if(owner():aimEntity()!=MarkerArray[SelectedIndex,entity]){
            print("Finished scaling-- new dimensions: "+holoEntity(SelectedIndex):boxSize())
            Scaling=0
        }
    }
    else{
        ThisHoloEnt=holoEntity(SelectedIndex)
        DeltaPos=owner():pos()-ScalingInitPos
        DeltaScale=vec(
                DeltaPos:dot(ThisHoloEnt:forward()),
                DeltaPos:dot(ThisHoloEnt:right()),
                DeltaPos:dot(ThisHoloEnt:up())
            )/6
        NewScale=ScalingInitScl+DeltaScale
        holoScale(SelectedIndex,vec(abs(NewScale:x()),abs(NewScale:y()),abs(NewScale:z())))
    }
}
else{
   if(owner():keyUse()){
        if(owner():aimEntity()==MarkerArray[SelectedIndex,entity]){
            if(owner():weapon():type()=="weapon_physgun"){
                print("Change to a tool other than the physgun to scale")
            }
            else{
                Scaling=1
                print("Press the use key (E) again or deselect to finish scaling")
                ScalingInitPos=owner():pos()
                ScalingInitScl=holoScale(SelectedIndex)
            }
        }
    }
}
if(SelectedIndex==0){
    Scaling=0
}

    #Edit model
    
if(CmdArray[1,string]=="mdl"){
    if(CmdArray[2,string]!=""){
        holoModel(SelectedIndex,CmdArray[2,string])
    }
    else{
        AimEnt=owner():aimEntity()
        if(AimEnt&!AimEnt:isWorld()){
            holoModel(SelectedIndex,AimEnt:model())
            print("Model set: "+AimEnt:model())
        }
    }
}

    #Edit material
    
if(CmdArray[1,string]=="mat"){
    holoMaterial(SelectedIndex,CmdArray[2,string])
}
if(owner():keyAttack1()&owner():tool()=="material"){
    holoMaterial(SelectedIndex,MarkerArray[SelectedIndex,entity]:getMaterial())
}

    #Edit color/alpha
    
if(CmdArray[1,string]=="col"){
    ColorArray=CmdArray[2,string]:explode(",")
    holoColor(SelectedIndex, vec(
                                    ColorArray[1,string]:toNumber(),
                                    ColorArray[2,string]:toNumber(),
                                    ColorArray[3,string]:toNumber()
                                )
    )
}
if(CmdArray[1,string]=="alpha"){
    holoAlpha(SelectedIndex,CmdArray[2,string]:toNumber())
}

if(owner():keyAttack1()&owner():tool()=="colour"){
    holoColor(SelectedIndex,MarkerArray[SelectedIndex,entity]:getColor())
    holoAlpha(SelectedIndex,MarkerArray[SelectedIndex,entity]:getAlpha())
}


#Print code

if(CmdArray[1,string]=="code"){
    if(RefProp){
        
        print("#Assign the appropriate entity to HoloRefEnt")
        print("#Assign the appropriate number to HoloIndexBase")
        print("#Set ParentToRefProp equal to 1 to parent holos to the reference prop")
        print("ParentToRefProp = 0")
        timer("init_codeprint",500)
        
    }
    else{
        print("Reference prop does not exist!")
    }
}

if(clk("init_codeprint")){
    CodePrintIter=1   
}

if(CodePrintIter>=1){
    
    if(holoEntity(CodePrintIter)){
        ThisHolo=holoEntity(CodePrintIter)
        
        RelPos=RefProp:toLocal(ThisHolo:pos())
        RelPosString= "vec"+(RelPos:toString():replace("[","(")):replace("]",")")
        
        Scale=holoScale(CodePrintIter)
        ScaleString="vec"+(Scale:toString():replace("[","(")):replace("]",")")
        
        ThisHoloAng=ThisHolo:angles()
        RelAng=ThisHoloAng:rotateAroundAxis(vec(0,0,1),-RefProp:angles():yaw())
        RelAng=RelAng:rotateAroundAxis(vec(0,1,0),-RefProp:angles():pitch())
        RelAng=RelAng:rotateAroundAxis(vec(1,0,0),-RefProp:angles():roll())
        RelAng=
            ang(
                round(RelAng:pitch(),0.01),
                round(RelAng:yaw(),0.01),
                round(RelAng:roll(),0.01)
            )
        RelAngString= "ang"+(RelAng:toString():replace("[","(")):replace("]",")")
        
        Color=ThisHolo:getColor()
        ColorString="vec"+(Color:toString():replace("[","(")):replace("]",")")
        
        ModelString=ThisHolo:model()
        
        MaterialString=ThisHolo:getMaterial()
        
        AlphaString=ThisHolo:getAlpha():toString()
        
        print("holoCreate(HoloIndexBase+"+CodePrintIter+",")
        print("   HoloRefEnt:toWorld("+RelPosString+"),")
        print("   "+ScaleString+",")
        print("   "+RelAngString+",")
        print("   "+ColorString)
        print(")")
        print("holoModel(HoloIndexBase+"+CodePrintIter+",\""+ModelString+"\")")
        print("holoMaterial(HoloIndexBase+"+CodePrintIter+",\""+MaterialString+"\")")
        print("holoAlpha(HoloIndexBase+"+CodePrintIter+","+AlphaString+")")
        print("if(ParentToRefProp){")
        print("    holoParent(HoloIndexBase+"+CodePrintIter+",HoloRefEnt)")
        print("}")
        print("")
    }
    
    CodePrintIter++
    print("#Incrementing CodePrintIter: "+CodePrintIter)
    if(CodePrintIter>MarkerArray:count()){
        CodePrintIter=0
        printColor(vec(255,0,0),"","#HOLOGRAM CODE PRINT COMPLETE")
    }
}

if(last()){
    for(Iter=1,MarkerArray:count()){
        MarkerArray[Iter,entity]:parentTo(entity())
    }
    selfDestructAll()
}
