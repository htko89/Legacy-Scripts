@name Serpentis Core
@inputs [Entity]:wirelink
@inputs [Pilot PilotCam]:wirelink PilotActive:number
@inputs [Copilot CopilotCam]:wirelink CopilotActive:number
@outputs [BGColor]:vector [On Thrust Fire1 Fire2]:number
@persist [Owner Core Turret Chip]:entity
@persist [SetWeight]:number
@model models/hunter/plates/plate025x025.mdl

#initialization code
runOnTick(1)
if(dupefinished()){
    reset()
}
if(first()){
    #set variables
    BGColor=vec(20,20,20)
    Owner=owner()
    Core=entity():isWeldedTo()
    Turret=Entity["Entity8",entity]
    Chip=entity()
    #set weights
    SetWeight=1
    for(Loop=1,Core:hasConstraints("Weld")){
        Core:isWeldedTo(Loop):setMass(30)
    }
    for(Loop=1,8){
        entity(Entity[Loop]):setMass(1000) #set all set entities' mass
    }
    #set exceptional weights
    Pilot["Entity",entity]:setMass(1) #Pilot seat
    Copilot["Entity",entity]:setMass(1) #Copilot seat
    Core:setMass(10000) #Core
    Turret:setMass(200) #Turret
    #set chips
    Entity:entity():setMass(1)
    Pilot:entity():setMass(1)
    PilotCam:entity():setMass(1)
    Copilot:entity():setMass(1)
    CopilotCam:entity():setMass(1)
    Chip:setMass(1)
    #pilot camera
    PilotCam["Parent",entity]=Core
    PilotCam["Position",vector]=Core:pos()-Core:forward()*250+Core:up()*100
    PilotCam["Direction",vector]=Core:forward()
    CopilotCam["Parent",entity]=Turret
    CopilotCam["Position",vector]=Turret:pos()+Turret:forward()*40
    CopilotCam["Direction",vector]=Turret:forward()
}
#Camera
PilotCam["Activated",number]=PilotActive
Pilot["Crosshairs",number]=1
CopilotCam["Activated",number]=CopilotActive
#Pilot orientation
if(PilotActive){
    Ang=ang(-Pilot["Elevation",number],Pilot["Bearing",number],0)
    TarQ=quat(Ang) #Calculate quaternion for target orientation
    CurQ=quat(Core) #Calculate current orientation quaternion
    Quat=TarQ/CurQ #TarQ/CurQ is a quaternion representing the rotation that will rotate the object from current orientation to the target one
    Vec=Core:toLocal(rotationVector(Quat)+Core:pos()) #applyTorque() works on intrinsic vectors! Get the rotation vector and transform it. #Alternatively, can use "V = transpose(matrix(E))*rotationVector(Q)"
    Core:applyTorque((150*Vec-12*Core:angVelVector())*Core:inertia()) #Factors 150 and 12 can be adjusted to achieve best effect. #Apply torque. angVelVector() works like a delta term
}
#Copilot orientation
if(CopilotActive){ #if ready, enable orientation control
    Ang=ang(-Copilot["Elevation",number],Copilot["Bearing",number],0)
}else{
    Ang=(Core:forward()):toAngle() 
}
TarQ=quat(Ang) #Calculate quaternion for target orientation
CurQ=quat(Turret) #Calculate current orientation quaternion
Quat=TarQ/CurQ #TarQ/CurQ is a quaternion representing the rotation that will rotate the object from current orientation to the target one
Vec=Turret:toLocal(rotationVector(Quat)+Turret:pos()) #applyTorque() works on intrinsic vectors! Get the rotation vector and transform it. #Alternatively, can use "V = transpose(matrix(E))*rotationVector(Q)"
Turret:applyTorque((150*Vec-24*Turret:angVelVector())*Turret:inertia()) #Factors 150 and 12 can be adjusted to achieve best effect. #Apply torque. angVelVector() works like a delta term
#Movement Code
Thrust=Pilot["W",number]
if(PilotActive){
    On=1
    for(Loop=1,6){
        entity(Entity[Loop+8]):setTrails(20,0,400,"trails/physbeam",vec(0,255,255),200)
    }
}else{
    On=0
    for(Loop=1,6){
        entity(Entity[Loop+8]):removeTrails()
    }
}
WS=Pilot["W",number]*1+Pilot["S",number]*-1
DA=Pilot["D",number]*1+Pilot["A",number]*-1
UD=Pilot["Space",number]*1+Pilot["Alt",number]*-1
Core:applyForce(Core:forward()*WS*Core:mass()*20)
Core:applyForce(Core:right()*DA*Core:mass()*20)
Core:applyForce(Core:up()*UD*Core:mass()*20)
if(!PilotActive){
    Core:applyForce(-Core:vel()*Core:mass())
}
