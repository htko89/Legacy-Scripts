@name 3D rotation
@inputs [Pod Eye Cam Ent]:wirelink
@persist [ShipCore]:entity [TarQuat]:quaternion 

#Set Functions
function entity:setWeight(M1,M2){
    This:setMass(M1)
    for(Loop=1,This:hasConstraints("Weld")){
        This:isWeldedTo(Loop):setMass(M2)
    }
}
function setControls(A){
    Eye["Enable",number]=A
    Pitch=(Eye["Y",number])/4
    Yaw=(-Eye["X",number])/4
    Roll=(Pod["D",number]-Pod["A",number])*3
}
function quaternion entity:rotateQuat(T:quaternion,C:quaternion,P,Y,R){
    if(first()){
        T=C
    }
    PQuat=qRotation(T:right(),P)
    YQuat=qRotation(T:up(),Y)
    RQuat=qRotation(T:forward(),R) 
    return (PQuat*YQuat*RQuat)*T
}
function entity:rotateEnt(T:quaternion,C:quaternion,M,DM){
    Q=T/C
    V=This:toLocal(rotationVector(Q)+This:pos())
    This:applyTorque((M*V-DM*This:angVelVector())*This:inertia())
    This:applyForce(-This:vel()*This:mass()/200)
}
function entity:setCamera(T:quaternion,A,B,U){
    if(first()){
        Cam["Parent",entity]=This
    }
    Cam["Activated",number]=A
    Cam["Angle",angle]=T:toAngle()
    Cam["Position",vector]=This:pos()+T:forward()*-B+T:up()*U
}
function entity:setGravity(G){
    This:propGravity(0)
    for(Loop=1,This:hasConstraints("Weld")){
        This:isWeldedTo(Loop):propGravity(G)
    }
}

#Dupe Code
if(dupefinished()){
    reset()
}

#First Code
if(first()){
    runOnTick(1)
    ShipCore=Ent["Entity1",entity]
    ShipCore:setWeight(10000,100)
}

#Controls
setControls(Pod["Active",number])

#Create Quat
CurQuat=quat(ShipCore)

#Rotate Quat
TarQuat=ShipCore:rotateQuat(TarQuat,CurQuat,Pitch,Yaw,Roll)

#Movement
ShipCore:rotateEnt(TarQuat,CurQuat,200,50)

#Camera
ShipCore:setCamera(TarQuat,Pod["Active",number],540,140)

#Gravity
#ShipCore:setGravity(0)
