# Author: Steeveeo
# Updated: November 20, 2010 @ 4:11 PM PST (-8 GMT)

# Use and Purpose:
# Put this chip in a bulkhead for an effective and smooth
# animated door that activates on [USE]. Automatically closes
# after some time if nobody is in the way. Use the inputs for
# further control.

# Fair Use and Legality:
# This chip is provided as is and is designed to work only
# as instructed. This is provided under Creative Commons and
# may be modified and/or shared with anyone as long as proper
# credit is given to the original author (Steeveeo). Failure to
# give credit by plagiarising or removing this header is subject
# to administrative punishment.

@name Use Door
@inputs Lock OpenSeconds OwnerOnly
@outputs PlayersInRange 
@persist PlayOpenSound SoundOpenPlayed PlayClosedSound SoundClosedPlayed
@persist SlideUnits MaxSlide
@trigger all
@model models/SmallBridge/Panels/sbdoor.mdl

#CREDITS:
#
#Writer: Steeveeo

runOnUse(1)
hide(1)

#Startup
if(first()|dupefinished())
{
    entity():setAlpha(0)
    SlideUnits = 0
    MaxSlide = 36
    
    #Create Replacement Holos
    #--Left
    holoCreate(1)
    holoModel(1,entity():model())
    holoSkin(1,entity():getSkin())
    holoMaterial(1,entity():getMaterial())
    holoColor(1,entity():getColor())
    holoPos(1,entity():toWorld(vec(0,-14,0)))
    holoScale(1,vec(1,0.5,1))
    holoParent(1,entity())
    #--Right
    holoCreate(2)
    holoModel(2,entity():model())
    holoSkin(2,entity():getSkin())
    holoMaterial(2,entity():getMaterial())
    holoColor(2,entity():getColor())
    holoPos(2,entity():toWorld(vec(0,14,0)))
    holoScale(2,vec(1,0.5,1))
    holoParent(2,entity())
}

#Variable Declaration
if(OpenSeconds == 0)
{
    OpenSeconds = 3
}

#Open/Close door
if(!Lock)
{
    if(OwnerOnly & useClk(owner()))
    {
        entity():setSolid(0)
        soundPurge()
        soundPlay("DoorSlide", 0, "doors/doormove3.wav")
        timer("ChecktoClose",OpenSeconds*1000)
        
        timer("Open Anim",1000/MaxSlide)
    }
    elseif(!OwnerOnly & useClk())
    {
        entity():setSolid(0)
        soundPurge()
        soundPlay("DoorSlide", 0, "doors/doormove3.wav")
        timer("ChecktoClose",OpenSeconds*1000)
        
        timer("Open Anim",1000/MaxSlide)
    }
}
if(clk("ChecktoClose"))
{
    #Entity Discovery
    findByClass("player")
    PlayersInRange = findClipToSphere(entity():pos(), 75)
    if(!PlayersInRange)
    {
        soundPurge()
        soundPlay("DoorSlide", 0, "doors/doormove3.wav")
        timer("Close Anim",1000/MaxSlide)
    }
    else
    {
        timer("ChecktoClose",1000)
    }
}

#------------
# Animations
#------------

#Slide Open
if(clk("Open Anim"))
{
    SlideUnits++
    holoPos(1,holoEntity(1):toWorld(vec(0,-1,0)))
    holoPos(2,holoEntity(2):toWorld(vec(0,1,0)))
    
    if(SlideUnits < MaxSlide)
    {
        timer("Open Anim",1000/MaxSlide)
    }
    else
    {
        soundPurge()
        soundPlay("DoorStop", 1, "doors/door_metal_thin_open1.wav")
    }
}

#Slide Closed
if(clk("Close Anim"))
{
    SlideUnits--
    holoPos(1,holoEntity(1):toWorld(vec(0,1,0)))
    holoPos(2,holoEntity(2):toWorld(vec(0,-1,0)))
    
    if(SlideUnits > 0)
    {
        timer("Close Anim",1000/MaxSlide)
    }
    else
    {
        soundPurge()
        soundPlay("DoorStop", 1, "doors/door_metal_thin_open1.wav")
        entity():setSolid(1)
    }
}
