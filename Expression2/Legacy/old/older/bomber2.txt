@name Bomber2

@inputs [InProps]:array [LastSpawned]:entity
@outputs [Spawn]:number [Undo]:number

@persist [Players Props Ready]:array Bomber:entity
@persist [Stop]:number
@outputs [State Find PlayerCount InPropCount PropCount]:number
@trigger 

runOnTick(1)

if(dupefinished()){
    reset()
}

if(first()){
    State=1
    Bomber=entity():isWeldedTo()
}


Equipped=(owner():weapon():type():find("physgun") ? 1 : 0)

if(!Equipped){
    Undo=(!Undo ? 1 : 0)
    State=1
    exit()
}

if(tickClk()){
    Spawn=0
    Undo=0
    InPropCount=InProps:count()
}

if(State==1){ #Find
    timer("Delay",500)
    if(clk("Delay")){
        if(!Find){
            findClearBlackList() 
            findExcludeEntities(playersAdmins())
            findExcludeEntities(playersSuperAdmins())
            findExcludeEntity(owner())
            Find=findByClass("player")
        }
        if(Find){
            Players=findToArray()
            PlayerCount=Players:count()
        }
        Props=InProps
        PropCount=Props:count()
        Spawn=(PlayerCount>PropCount ? 1 : 0)
        Undo=(PlayerCount<PropCount ? 1 : 0)
        #LastSpawned:setAlpha(0)
        Props=InProps
        if(Find&PlayerCount==PropCount){
            Find=0
            State=2
        }
    }
}
for(Loop=1, PropCount){
    Prop=Props[Loop,entity]
    CurP=Prop:pos()
    TarQ = (State==1 ? quat(Bomber:forward():toAngle()) : quat(-Bomber:up():toAngle()))
    CurQ = quat(Prop)
    Q = TarQ/CurQ
    V = Prop:toLocal(rotationVector(Q)+CurP)
    Prop:applyTorque((350*V - 45*Prop:angVelVector())*Prop:inertia())
}
if(State>3){ #Move
    for(Loop=1, PropCount){
        TarP = (State==1 ? Bomber:up()*500*Loop : Players[Loop,entity]:pos()+vec(0,0,2000))
        CurP = Prop:pos()
        TarVector=TarP-CurP
        Prop:applyForce((15*TarVector-Prop:vel()/66)*Prop:mass())
        if(State==2){
            if(TarVector:length()<50){
                Ready[Loop,number]=1
            }
        }    
    }
    if(Ready:sum()==PropCount){
        State=3
        Drop=1
        timer("Stop",500)
    }
}
if(State==3){ #Drop
    if(Stop){
        for(Loop=1, PropCount){
            Prop=Props[Loop,entity]
            Prop:applyForce(-Prop:vel()/20*Prop:mass())
        }
    }
    if(clk("Stop")){
        Stop=0
        timer("Drop", 5000)
        InPropCount=0
        State=4
    }
}
if(State==4){ #Drop
    if(clk("Drop")){
        State=1
    }
}
