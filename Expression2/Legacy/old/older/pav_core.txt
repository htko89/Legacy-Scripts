#Name
@name PAV Core

#Inputs
@inputs [Pod Eye Ent]:wirelink
@inputs [PodActive]:number

#Variables
@persist [Angle AngleMult]:angle 
@persist [Control Thrust ThrustMult Speed SpeedMult]:vector
@persist [ShipCore]:entity

#Trigger
@trigger PodActive

#Dupe Code
if(dupefinished()){
    reset()
}

#First Code
if(first()){
    runOnTick(1)
    #Set variables
    ShipCore=Ent["Entity1",entity]
    Speed=vec(20,20,5)
    SpeedMult=vec(0.4,0.4,0.2)
    AngleMult=ang(0.1,0.1,0.4)
    Eye["Enable", number]=1
}

#Set Variables
Forward=ShipCore:forward()
Right=ShipCore:right()
Up=ShipCore:up()
ShipPosition=ShipCore:pos()

#Set Keyboard Control
Control=vec(Pod["D",number]-Pod["A",number],Pod["W",number]-Pod["S",number],Pod["Space",number]-Pod["Shift",number])

#Set Speed Control
ThrustMult=ThrustMult:setX((Control:x() ? ThrustMult:x()+Control:x()*SpeedMult:x() : ThrustMult:x()+sign(-ThrustMult:x())*SpeedMult:x()/2))
ThrustMult=ThrustMult:setY((Control:y() ? ThrustMult:y()+Control:y()*SpeedMult:y() : ThrustMult:y()+sign(-ThrustMult:y())*SpeedMult:y()))
ThrustMult=ThrustMult:setZ((Control:z() ? ThrustMult:z()+Control:z()*SpeedMult:z() : ThrustMult:z()+sign(-ThrustMult:z())*SpeedMult:z()))
ThrustMult=clamp(ThrustMult,-Speed,Speed)

#Position and Angle Control
if(PodActive){
    Thrust+=Right*ThrustMult:x()
    Thrust+=Forward*ThrustMult:y()
    Thrust+=Up*ThrustMult:z()
    Angle+=ang(-Eye["Y",number]*AngleMult:pitch(),0,0)
    Angle+=ang(0,-Eye["X",number]*AngleMult:yaw(),0)
    Angle=angnorm(Angle):setRoll(0)
}else{
    Thrust=ShipPosition
    Angle=ShipCore:angles():setRoll(0)
}

#Movement
TarQ = quat(Angle)
CurQ = quat(ShipCore)
Q = TarQ/CurQ
V = ShipCore:toLocal(rotationVector(Q)+ShipPosition)
ShipCore:applyTorque((350*V - 45*ShipCore:angVelVector())*ShipCore:inertia())  
#ShipCore:setAng(Angle)
ShipCore:setPos(Thrust)

if(~PodActive){
    if(PodActive){
        ShipCore:propFreeze(0)
        for(Loop=1,ShipCore:hasConstraints("Weld")){
            ShipCore:isWeldedTo(Loop):propFreeze(0)
        }
    }else{
        ShipCore:propFreeze(1)
        for(Loop=1,ShipCore:hasConstraints("Weld")){
            ShipCore:isWeldedTo(Loop):propFreeze(1)
        }
    }
}
