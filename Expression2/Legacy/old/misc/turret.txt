@name Turret
@inputs [Turret]:entity
@outputs [F1 F2 F3 F4]:number
@persist [Core Pivot]:entity
@persist [Defense]:gtable
@persist [Fire FireNum]:number [Target]:entity
@model

runOnTick(1)

if(dupefinished()){
    reset()
}

#Movement Code
if(first()){
    Defense=gTable("Defense",0)
    Turret:setMass(500)
    Core=entity():isWeldedTo()
    Core:setMass(10000)
    Pivot=Core:isConstrainedTo("Axis")
    Pivot:setMass(500)
    for(Loop=1,Turret:hasConstraints("Weld")){
        Turret:isWeldedTo(Loop):setMass(1)
    }
}
Fire=Defense[1,number]
Target=Defense[2,entity]

if(Fire){
    timer("Fire",635/4)
    if(clk("Fire")){
        FireNum=(FireNum<4? FireNum+1 :0)
        F1=(FireNum==1 ? 1 : 0)
        F2=(FireNum==2 ? 1 : 0)
        F3=(FireNum==3 ? 1 : 0)
        F4=(FireNum==4 ? 1 : 0)
    }
}else{
    stoptimer("Fire")
    F1=0
    F2=0
    F3=0
    F4=0
}
if(tickClk()){
    Turret:propGravity(0)
    Core:propGravity(0)
    Pivot:propGravity(0)
    for(Loop=1,Turret:hasConstraints("Weld")){
        Turret:isWeldedTo(Loop):propGravity(0)
    }
    TarP=Target:boxCenterW()
    CurP=Turret:pos()+Turret:up()*0+Turret:forward()*0
    TarVector=(TarP-CurP)
    TarQ = quat(TarVector:toAngle())
    CurQ = quat(Turret)
    Q = TarQ/CurQ
    V = Turret:toLocal(rotationVector(Q)+Turret:pos())
    Turret:applyTorque((350*V - 45*Turret:angVelVector())*Turret:inertia())
}
