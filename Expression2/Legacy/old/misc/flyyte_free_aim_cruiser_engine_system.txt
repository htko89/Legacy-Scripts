@name Flyyte Free Aim Cruiser Engine System
@inputs Pod:wirelink Shp:entity Chr:entity Active
@outputs Pitch Roll Yaw Speed Speed_D ThrustDir
@persist Drv:entity Thrust [P1 P Y1 Y R1 R] Speed_L
@persist Fz F1z Tz Dz [Ta Da]:angle 
@persist TurnSpeed T_Mass T_Inert:vector
@persist Dv:vector C:array P_orient Y_orient R_orient SpeedMul
@trigger 

interval(30)
timer("grav",200)

if(first()|dupefinished())
{
    
    
    P_orient = 1
    Y_orient = 1
    R_orient = 1
    
    SpeedMul = 1.5
    TurnSpeed = 10
    
    Pod["Crosshairs",number] = 1
    Pod["Allow Buttons",number] = 1
    F1z = Shp:pos():z()
    Fz = F1z
    
    
    Speed_L = 0
    
    C = entity():getConstraints()
    C[C:count() + 1,entity] = entity()
    
    for( K = 1,C:count() )
    {
        T_Mass += C[K,entity]:mass()
        T_Inert += C[K,entity]:inertia()
    }
}

if(clk("grav"))
{
    for ( I = 1,C:count() )
    {
       C[I,entity]:propGravity(0)
    }
}

Pitch = Shp:angles():pitch()
Roll = Shp:angles():roll()
Yaw = Shp:angles():yaw()

Speed = Shp:vel():length()

Drv = Shp:driver()

W = Pod["W",number]
A = Pod["A",number]
S = Pod["S",number]
D = Pod["D",number]
K = Pod["R",number]
Up = Pod["PrevWeapon",number]
Dn = Pod["NextWeapon",number]
Sh = Pod["Shift",number]
Sp = Pod["Space",number]
At = Pod["Alt",number]

Speed_L += (Up-Dn)*10
Speed_L = clamp(Speed_L,0,200)
Speed_D = Speed_L/10
Thrust += (Speed_L - Thrust)/8

if(clk())
{
    if((W-S)*!K == 0)
    {
        P1 = 0
    }
    else
    {
        P1 += P_orient*(W-S)*!K*TurnSpeed
    }
    
    P1 = clamp(P1,-TurnSpeed*10,TurnSpeed*10)
    P += (P1-P)/7   
    
    if(((A-D)*Sh*!K) == 0)
    {
        Y1 = 0
    }
    else
    {
        Y1 += Y_orient*(A-D)*Sh*!K*TurnSpeed/2
    }
    
    Y1 = clamp(Y1,-TurnSpeed*10,TurnSpeed*10)
    Y += (Y1-Y)/7
    
    if(((D-A)*!Sh*!K) == 0)
    {
        R1 = 0
    }
    else
    {
        R1 += R_orient*(D-A)*!Sh*!K*TurnSpeed
    }
    
    R1 =  clamp(R1,-TurnSpeed*10,TurnSpeed*10)
    R +=  (R1-R)/7
    
    if(Active)
    {
        Shp:applyForce(((Chr:right()*(Sp - At) + (Chr:forward()*(A-D) + Chr:up()*(W-S))*K)*Thrust*SpeedMul-Shp:vel()/10)*T_Mass)
        Shp:applyTorque((vec(R,P,Y) - Shp:angVelVector())*T_Inert*40)
    
        ThrustDir = (Sp-At)
    }
    else
    {
        Shp:applyForce(-Shp:vel()*T_Mass)
        Shp:applyTorque(-Shp:angVelVector()*T_Inert*40)
    }
    
    
    
    #freeze ship when off
    if(changed(Active) & Active)
    {
        for ( I = 1,C:count() )
        {
           C[I,entity]:propFreeze(0)
        }
    }
    elseif(changed(Active) & !Active)
    {
        for ( I = 1,C:count() )
        {
           C[I,entity]:propFreeze(1)
        }
    }    
}

