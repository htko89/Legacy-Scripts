@name Base Interaction
@inputs [AEGP BEGP]:wirelink
@inputs [AEnt BEnt]:entity
@inputs [Air Energy Coolant]:string
@inputs [Hull Armor Shields Capacitor]:string
@inputs [Whitelist]:array
@persist [InteractionSig ControlSig Group]:string [Scope]:number
@persist [Owner]:entity
@persist [First CellHeight Margin Min Max]:number
@persist [TSize T1Height T2Height T3Height]:number
@persist [ESize E1Height]:number
@persist [MSize MAlpha Click]:number
@persist [Red Orange Green]:vector
@persist [AColor BColor CColor DColor]:vector
@persist [AType AInfo AText AElement]:array [AMouse]:number
@persist [BType BInfo BText BElement]:array [BMouse]:number
@outputs [CDoor GDoor CBlinds GBlinds]:number
@outputs [Refine Power]:number
@trigger 

#Dupe Code
if(dupefinished()){
    reset()
}

#First Code
First=first()
if(First){
    InteractionSig="Interaction"
    ControlSig="Control"
    Group="Base"
    Scope=0
    signalSetGroup(Group)
    runOnSignal(InteractionSig,Scope,1) 
    #Function Preset
    CDoor=1
    GDoor=1
    CBlinds=0
    GBlinds=0
    Refine=1
    Power=1
    #Render Variables
    Owner=owner()
    CellHeight=30 #Height of cells
    Margin=10
    Min=0
    Max=512
    TSize=CellHeight/2.5 #Text Size. preferably 0.4x of Cellheight
    T1Height=(CellHeight-TSize)/2 #Position Offsets
    T2Height=(CellHeight-TSize*2)/3 #Position Offsets
    T3Height=T2Height*2+TSize #Position Offsets
    ESize=CellHeight/1.1 #Button Size
    E1Height=(CellHeight-ESize/2)/2 #Position Offsets
    MSize=5 #Mouse Size
    MAlpha=200
    Red=vec(255,0,0)
    Orange=vec(255,150,0)
    Green=vec(0,255,0)
    AColor=vec(80,80,80)#vec(244,244,244) #box
    BColor=vec(40,40,40)#vec(200,200,200) #bg
    CColor=vec(200,200,200)#vec(100,100,100) #bgtext & boxoutline
    DColor=vec(244,244,244)#vec(11,11,11) #boxtext
}
if(First){
    #A
    Index=0
    Index++, AType[Index,string]="T1",      AInfo[Index,string]="Base Controls"
    Index++, AType[Index,string]="Box",     AInfo[Index,number]=6
    Index++, AType[Index,string]="T2",      AInfo[Index,string]="Core Doors"
    Index++, AType[Index,string]="T3",      AInfo[Index,string]="Off"
    Index++, AType[Index,string]="Element", AInfo[Index,string]=""
    Index++, AType[Index,string]="T2",      AInfo[Index,string]="Generator Doors"
    Index++, AType[Index,string]="T3",      AInfo[Index,string]="Off"
    Index++, AType[Index,string]="Element", AInfo[Index,string]=""
    Index++, AType[Index,string]="T2",      AInfo[Index,string]="Core Blinds"
    Index++, AType[Index,string]="T3",      AInfo[Index,string]="Off"
    Index++, AType[Index,string]="Element", AInfo[Index,string]=""
    Index++, AType[Index,string]="T2",      AInfo[Index,string]="Generator Blinds"
    Index++, AType[Index,string]="T3",      AInfo[Index,string]="Off"
    Index++, AType[Index,string]="Element", AInfo[Index,string]=""
    Index++, AType[Index,string]="T2",      AInfo[Index,string]="Refineries"
    Index++, AType[Index,string]="T3",      AInfo[Index,string]="Off"
    Index++, AType[Index,string]="Element", AInfo[Index,string]=""
    Index++, AType[Index,string]="T2",      AInfo[Index,string]="Fusion Reactors"
    Index++, AType[Index,string]="T3",      AInfo[Index,string]="Off"
    Index++, AType[Index,string]="Element", AInfo[Index,string]=""
    #B
    Index=0
    Index++, BType[Index,string]="T1",      BInfo[Index,string]="Base Status"
    Index++, BType[Index,string]="Box",     BInfo[Index,number]=4
    Index++, BType[Index,string]="T2",      BInfo[Index,string]="Hull"
    Index++, BType[Index,string]="T3",      BInfo[Index,string]=""
    Index++, BType[Index,string]="T2",      BInfo[Index,string]="Armor"
    Index++, BType[Index,string]="T3",      BInfo[Index,string]=""
    Index++, BType[Index,string]="T2",      BInfo[Index,string]="Shields"
    Index++, BType[Index,string]="T3",      BInfo[Index,string]=""
    Index++, BType[Index,string]="T2",      BInfo[Index,string]="Capacitor"
    Index++, BType[Index,string]="T3",      BInfo[Index,string]=""
    Index++, BType[Index,string]="T1",      BInfo[Index,string]="Resource Status"
    Index++, BType[Index,string]="Box",     BInfo[Index,number]=3
    Index++, BType[Index,string]="T2",      BInfo[Index,string]="Air"
    Index++, BType[Index,string]="T3",      BInfo[Index,string]=""
    Index++, BType[Index,string]="T2",      BInfo[Index,string]="Energy"
    Index++, BType[Index,string]="T3",      BInfo[Index,string]=""
    Index++, BType[Index,string]="T2",      BInfo[Index,string]="Coolant"
    Index++, BType[Index,string]="T3",      BInfo[Index,string]=""
}
if(First){
    #A Init
    AEGP:egpDrawTopLeft(1), AEGP:egpClear(), AText:clear(), AElement:clear()
    #Draw Objects
    Cell=0, Index=0
    Index++, AEGP:egpBox(Index,vec2(Min,Min),vec2(Max,Max)), AEGP:egpColor(Index,BColor)
             AEGP:entity():setColor(AColor)
    for(Loop=1, AType:count()){
        #[]# if(AType[Loop,string]=="T1"){
            Index++, AEGP:egpText(Index,AInfo[Loop,string],vec2(Margin*2,CellHeight*Cell+T1Height))
                     AEGP:egpSize(Index,TSize), AEGP:egpColor(Index,CColor)
            Cell++
        }elseif(AType[Loop,string]=="Box"){
            Index++, AEGP:egpRoundedBox(Index,vec2(Margin,CellHeight*Cell),vec2(Max-Margin*2,CellHeight*AInfo[Loop,number]))
                     AEGP:egpColor(Index,AColor)
            Index++, AEGP:egpRoundedBoxOutline(Index,vec2(Margin,CellHeight*Cell),vec2(Max-Margin*2,CellHeight*AInfo[Loop,number]))
                     AEGP:egpColor(Index,CColor)
        }elseif(AType[Loop,string]=="T2"){
            if(AType[Loop-1,string]!="Box"){
                Index++, AEGP:egpLine(Index,vec2(Margin,CellHeight*Cell),vec2(Max-Margin,CellHeight*Cell))
                         AEGP:egpColor(Index,CColor)
            }
            Index++, AEGP:egpText(Index,AInfo[Loop,string],vec2(Margin*2,CellHeight*Cell+T2Height))
                     AEGP:egpSize(Index,TSize), AEGP:egpColor(Index,DColor)
            Cell++
        }elseif(AType[Loop,string]=="T3"){
            Index++, AEGP:egpText(Index,AInfo[Loop,string],vec2(Margin*2,CellHeight*(Cell-1)+T3Height))
                     AEGP:egpSize(Index,TSize), AEGP:egpColor(Index,CColor), AText:pushNumber(Index)
        }elseif(AType[Loop,string]=="Element"){
            Index++, AEGP:egpRoundedBox(Index,vec2(Max-Margin*2-ESize,CellHeight*(Cell-1)+E1Height),vec2(ESize,ESize/2))
                     AEGP:egpColor(Index,BColor), AElement:pushNumber(Index)
            Index++, AEGP:egpRoundedBoxOutline(Index,vec2(Max-Margin*2-ESize,CellHeight*(Cell-1)+E1Height),vec2(ESize,ESize/2))
                     AEGP:egpColor(Index,CColor)
        }
    } Loop=0
    Index++, AEGP:egpCircle(Index,vec2(0,0),vec2(MSize,MSize))
             AEGP:egpColor(Index,DColor), AEGP:egpAlpha(Index,MAlpha), AEGP:egpParentToCursor(Index)
    Index++, AEGP:egpCircleOutline(Index,vec2(0,0),vec2(MSize,MSize))
             AEGP:egpColor(Index,AColor), AEGP:egpAlpha(Index,MAlpha), AEGP:egpParentToCursor(Index), AMouse=Index
    #B Init
    BEGP:egpDrawTopLeft(1), BEGP:egpClear(), BText:clear(), BElement:clear()
    #Draw Objects
    Cell=0, Index=0
    Index++, BEGP:egpBox(Index,vec2(Min,Min),vec2(Max,Max)), BEGP:egpColor(Index,BColor)
             BEGP:entity():setColor(AColor)
    for(Loop=1, BType:count()){
        #[]# if(BType[Loop,string]=="T1"){
            Index++, BEGP:egpText(Index,BInfo[Loop,string],vec2(Margin*2,CellHeight*Cell+T1Height))
                     BEGP:egpSize(Index,TSize), BEGP:egpColor(Index,CColor)
            Cell++
        }elseif(BType[Loop,string]=="Box"){
            Index++, BEGP:egpRoundedBox(Index,vec2(Margin,CellHeight*Cell),vec2(Max-Margin*2,CellHeight*BInfo[Loop,number]))
                     BEGP:egpColor(Index,AColor)
            Index++, BEGP:egpRoundedBoxOutline(Index,vec2(Margin,CellHeight*Cell),vec2(Max-Margin*2,CellHeight*BInfo[Loop,number]))
                     BEGP:egpColor(Index,CColor)
        }elseif(BType[Loop,string]=="T2"){
            if(BType[Loop-1,string]!="Box"){
                Index++, BEGP:egpLine(Index,vec2(Margin,CellHeight*Cell),vec2(Max-Margin,CellHeight*Cell))
                         BEGP:egpColor(Index,CColor)
            }
            Index++, BEGP:egpText(Index,BInfo[Loop,string],vec2(Margin*2,CellHeight*Cell+T2Height))
                     BEGP:egpSize(Index,TSize), BEGP:egpColor(Index,DColor)
            Cell++
        }elseif(BType[Loop,string]=="T3"){
            Index++, BEGP:egpText(Index,BInfo[Loop,string],vec2(Margin*2,CellHeight*(Cell-1)+T3Height))
                     BEGP:egpSize(Index,TSize), BEGP:egpColor(Index,CColor), BText:pushNumber(Index)
        }elseif(BType[Loop,string]=="Element"){
            Index++, BEGP:egpRoundedBox(Index,vec2(Max-Margin*2-ESize,CellHeight*(Cell-1)+E1Height),vec2(ESize,ESize/2))
                     BEGP:egpColor(Index,BColor), BElement:pushNumber(Index)
            Index++, BEGP:egpRoundedBoxOutline(Index,vec2(Max-Margin*2-ESize,CellHeight*(Cell-1)+E1Height),vec2(ESize,ESize/2))
                     BEGP:egpColor(Index,CColor)
        }
    } Loop=0
    Index++, BEGP:egpCircle(Index,vec2(0,0),vec2(MSize,MSize))
             BEGP:egpColor(Index,DColor), BEGP:egpAlpha(Index,MAlpha), BEGP:egpParentToCursor(Index)
    Index++, BEGP:egpCircleOutline(Index,vec2(0,0),vec2(MSize,MSize))
             BEGP:egpColor(Index,AColor), BEGP:egpAlpha(Index,MAlpha), BEGP:egpParentToCursor(Index), BMouse=Index
}
if(First|~AEnt){
    if(AEnt){  
        Valid=0
        for(Loop=1, Whitelist:count()){
            if(AEnt:name():find(Whitelist[Loop,string])){
                Valid=1
            }
        } 
        if(Valid){
            AEGP:egpColor(AMouse,Red)
            Index=AElement[1,number]
            if(inrange(AEGP:egpCursor(AEnt),AEGP:egpPos(Index),AEGP:egpPos(Index)+AEGP:egpSize(Index))){
                CDoor=(CDoor<=1 ? CDoor+1 : 0)
            }
            Index=AElement[2,number]
            if(inrange(AEGP:egpCursor(AEnt),AEGP:egpPos(Index),AEGP:egpPos(Index)+AEGP:egpSize(Index))){
                GDoor=(GDoor<=1 ? GDoor+1 : 0)
            }
            Index=AElement[3,number]
            if(inrange(AEGP:egpCursor(AEnt),AEGP:egpPos(Index),AEGP:egpPos(Index)+AEGP:egpSize(Index))){
                CBlinds=(CBlinds ? 0 : 1)
            }
            Index=AElement[4,number]
            if(inrange(AEGP:egpCursor(AEnt),AEGP:egpPos(Index),AEGP:egpPos(Index)+AEGP:egpSize(Index))){
                GBlinds=(GBlinds ? 0 : 1)
            }
            Index=AElement[5,number]
            if(inrange(AEGP:egpCursor(AEnt),AEGP:egpPos(Index),AEGP:egpPos(Index)+AEGP:egpSize(Index))){
                Refine=(Refine ? 0 : 1)
            }
            Index=AElement[6,number]
            if(inrange(AEGP:egpCursor(AEnt),AEGP:egpPos(Index),AEGP:egpPos(Index)+AEGP:egpSize(Index))){
                Power=(Power ? 0 : 1)
            }
        }
    }else{
        AEGP:egpColor(AMouse,AColor)
    }
}
if(First|(~AEnt&AEnt)){
    Index=AText[1,number]
    Index2=AElement[1,number]
    if(CDoor==0){
        AEGP:egpSetText(Index,"Closed"), AEGP:egpColor(Index2,Red)
    }elseif(CDoor==1){
        AEGP:egpSetText(Index,"Whitelist"), AEGP:egpColor(Index2,Orange)
    }elseif(CDoor==2){
        AEGP:egpSetText(Index,"Open"), AEGP:egpColor(Index2,Green)
    }    
    Index=AText[2,number]
    Index2=AElement[2,number]
    if(GDoor==0){
        AEGP:egpSetText(Index,"Closed"), AEGP:egpColor(Index2,Red)
    }elseif(GDoor==1){
        AEGP:egpSetText(Index,"Whitelist"), AEGP:egpColor(Index2,Orange)
    }elseif(GDoor==2){
        AEGP:egpSetText(Index,"Open"), AEGP:egpColor(Index2,Green)
    }
    Index=AText[3,number]
    Index2=AElement[3,number]
    AEGP:egpSetText(Index,(CBlinds ? "Powered" : "Off"))
    AEGP:egpColor(Index2,(CBlinds ? Green : Red))
    Index=AText[4,number]
    Index2=AElement[4,number]
    AEGP:egpSetText(Index,(GBlinds ? "Powered" : "Off"))
    AEGP:egpColor(Index2,(GBlinds ? Green : Red))
    Index=AText[5,number]
    Index2=AElement[5,number]
    AEGP:egpSetText(Index,(Refine ? "Automatic" : "Off"))
    AEGP:egpColor(Index2,(Refine ? Green : Red))
    Index=AText[6,number]
    Index2=AElement[6,number]
    AEGP:egpSetText(Index,(Power ? "Automatic" : "Off"))
    AEGP:egpColor(Index2,(Power ? Green : Red))
}
if(First|~BEnt){
    if(BEnt){  
        Valid=0
        for(Loop=1, Whitelist:count()){
            if(BEnt:name():find(Whitelist[Loop,string])){
                Valid=1
            }
        } 
        if(Valid){
            BEGP:egpColor(BMouse,Red)
        }
    }else{
        BEGP:egpColor(BMouse,AColor)
    }
}
if(First|signalClk(Group,InteractionSig,Scope)){
    Index=BText[1,number]
    BEGP:egpSetText(Index,Hull)
    Index=BText[2,number]
    BEGP:egpSetText(Index,Armor)
    Index=BText[3,number]
    BEGP:egpSetText(Index,Shields)
    Index=BText[4,number]
    BEGP:egpSetText(Index,Capacitor)
    Index=BText[5,number]
    BEGP:egpSetText(Index,Air)
    Index=BText[6,number]
    BEGP:egpSetText(Index,Energy)
    Index=BText[7,number]
    BEGP:egpSetText(Index,Coolant)
}
